[gd_scene load_steps=6 format=2]

[ext_resource path="res://assets/default.png" type="Texture" id=1]
[ext_resource path="res://addons/shaderV/uv/animated/swirlUV.gd" type="Script" id=2]

[sub_resource type="VisualShaderNodeCustom" id=1]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 5.0, 3, 5.0 ]
initialized = true
script = ExtResource( 2 )

[sub_resource type="VisualShader" id=2]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// SwirlUV
vec2 _swirlUVFunc(vec2 _swirl_uv, float _swirl_time, vec2 _swirl_pivot, float _swirl_amount){
	float _swirl_rotation_index = _swirl_amount * length(_swirl_uv - _swirl_pivot) * _swirl_time;
	_swirl_uv -= _swirl_pivot;
	_swirl_uv *= mat2(vec2(cos(_swirl_rotation_index), - sin(_swirl_rotation_index)),
										vec2(sin(_swirl_rotation_index), cos(_swirl_rotation_index)));
	_swirl_uv += _swirl_pivot;
	return _swirl_uv;
}

void vertex() {
// Output:0

}

void fragment() {
// SwirlUV:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in2p2 = 5.00000;
	float n_in2p3 = 5.00000;
	vec3 n_out2p0;
	{
		n_out2p0.xy = _swirlUVFunc(UV.xy, n_in2p3, n_in2p1.xy, n_in2p2);
	}

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 11.1707, 172.126 )
nodes/fragment/0/position = Vector2( 820, 280 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 200, 460 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[node name="Background" type="ColorRect"]
material = SubResource( 3 )
margin_right = 800.0
margin_bottom = 388.0
color = Color( 0, 0, 0, 1 )

[node name="TextureRect" type="TextureRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 1 )
expand = true
